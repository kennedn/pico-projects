/* Implements the NEC infrared protocol (very poorly)*/

.program nec
.side_set 1 opt
.wrap_target
    pull
    set x 21 
    set y 14
pulse_init:
    nop side 1
    jmp x-- pulse_init side 0
    set x 21 side 1
    jmp y-- pulse_init side 0
    set x 20 side 1
    set y 7 side 0
wait_init:
    nop side 0
    jmp x-- wait_init side 0
    set x 20 side 0
    jmp y-- wait_init side 0
next:
    out y 1
    set x 18
pulse:
    nop side 1
    jmp x-- pulse side 0
    jmp !y short side 1
long:
    set x 8 side 0
    nop side 1
    jmp bit_loop side 0 [6]
short:
    set x 2 side 0
    nop side 1
    nop side 0 [6]
bit_loop:
    nop side 0 [7] 
    jmp x-- bit_loop [4]
    jmp !osre next
    set x 19
end_pulse:
    nop side 1
    jmp x-- end_pulse side 0
.wrap

% c-sdk {
#include "hardware/clocks.h"
static inline void nec_program_init(PIO pio, uint sm, uint offset, uint pin, bool invert) {
    pio_sm_config c = nec_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_set_pins_with_mask(pio, sm, 1u << pin, 0);
    // Calculate a clock divider from passed frequency, *1000000 to convert from Mhz to hz and *2 because there are 2 asm instructions
    float div = clock_get_hz(clk_sys) / (38000 * 2);
    sm_config_set_clkdiv(&c, div);
    sm_config_set_out_shift(&c, true, false, 32);

    if (invert) { 
        gpio_set_outover(pin, GPIO_OVERRIDE_INVERT);
        gpio_pull_up(pin);
    } else {
        gpio_pull_down(pin);
    }
    // Init the pio state machine with PC at offset
    pio_sm_init(pio, sm, offset, &c);
    // Start sm
    pio_sm_set_enabled(pio, sm, true);
}
%}
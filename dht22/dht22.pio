.program dht22
set pins 1 
set pindirs 1 
set pins 0
set x 25
wait_1ms: 
    jmp x-- wait_1ms [20]
set pindirs  0 
set y 1
wait_data:
    wait 1 pin 0
    wait 0 pin 0
    jmp y-- wait_data
set y 7
set x 4
bit_loop:
    wait 1 pin 0 [25]
    in pins 1 
    wait 0 pin 0
    jmp y-- bit_loop
    set y 7
    jmp x-- bit_loop
infinite_loop:
    set x 2
    jmp x-- infinite_loop

; .program dht22
; set pins 1
; set pindirs 1
; set x 25
; set pins 0
; assert_low:
;     jmp x-- assert_low [20]
; set pindirs 0
; set y 1
; wait_data:
;     wait 1 pin 0
;     wait 0 pin 0
;     jmp y-- wait_data
; set x 4
; set y 7
; bit_loop:
;     wait 1 pin 0 [25]
;     in pins 1
;     wait 0 pin 0
;     jmp y-- bit_loop
;     set y 7
;     jmp x-- bit_loop


; .side_set 2
; .wrap_target
; lcd_write:
;     out pins 9 side 0b00 // output rs + DB0-DB7 to pins; r/w = write, e = false
;     nop side 0b01 // toggle enable, lcd reads asserted data; r/w = write, e = true
;     set pindirs 0b10 side 0b10 // change DB7 to input; rs = out, DB7 = in, r/w = read, e = false 
; busy_loop:
;     set pins 0b00 side 0b11 // set register select to 0, trigger busy flag read; rs = inst , DB7 = busy, r/w = read, e = true
;     jmp pin busy_loop side 0b10  // loop if DB7 = 1 (busy); r/w = read, e = false
;     set pindirs 0b11 side 0b10 // else, change DB7 back to output; r/w = write, e = false
; .wrap


% c-sdk {
static inline void dht22_program_init(PIO pio, uint sm, uint offset, uint pin) {

  // 1. Define a config object
  pio_sm_config config = dht22_program_get_default_config(offset);  
  
  // 2. Set and initialize the pin
  sm_config_set_in_pins(&config, pin);
  sm_config_set_out_pins(&config, pin, 1);
  sm_config_set_set_pins(&config, pin, 1);
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, 1);
  pio_sm_set_pins(pio, sm, 1);
  pio_gpio_init(pio, pin);  
  
  // 3. Set and initialize the output pins
  
  float clock_divider = (float) clock_get_hz(clk_sys) /  490196;
  sm_config_set_clkdiv(&config, clock_divider);  
  
  // 5. Configure output shift register
  sm_config_set_in_shift(&config, false, true, 8);  
  sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_RX);
  
  // 8. Apply the configuration
  pio_sm_init(pio, sm, offset, &config);  
  
  // 9. Activate the State Machine
  pio_sm_set_enabled(pio, sm, true);
}
%}
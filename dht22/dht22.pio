; Program triggers a data transfer on dht22 and reads out 5*8 bit numbers into RX fifo via autopush
.program dht22
set pindirs 1 
set pins 1 
set pins 0
set x 25
wait_1ms: ; assert 0 on pin for ~1000us (1ms) (25 * 20 * 2us)
    jmp x-- wait_1ms [20] 
set pindirs  0 
set y 1
wait_data: ; use wait to seek to the first data bit's falling edge
    wait 1 pin 0
    wait 0 pin 0
    jmp y-- wait_data
set y 7
set x 4
bit_loop: ; for each bit (8 * 5 = 40), seek 50ms past rising edge and read value into isr
    wait 1 pin 0 [25] ; ~25 * 2us
    in pins 1 ; autopush will occur at 8 bits
    wait 0 pin 0
    jmp y-- bit_loop
    set y 7
    jmp x-- bit_loop
pull block ; infinite loop


% c-sdk {
#include "hardware/clocks.h"
static inline void dht22_program_init(PIO pio, uint sm, uint offset, uint pin) {

    pio_sm_config config = dht22_program_get_default_config(offset);  

    // Init pin as out, in and set pin with initial direction as out
    sm_config_set_in_pins(&config, pin);
    sm_config_set_out_pins(&config, pin, 1);
    sm_config_set_set_pins(&config, pin, 1);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, 1);
    pio_sm_set_pins(pio, sm, 1);
    pio_gpio_init(pio, pin);  

    // Setting 490196hz equates to ~2us per instruction
    float clock_divider = (float) clock_get_hz(clk_sys) /  490196;
    sm_config_set_clkdiv(&config, clock_divider);  

    // Joining fifo's gives 8 RX slots instead of 4, which simplifies the pio program
    // The caveat being that pio_sm_put() can no longer be used for flow control
    sm_config_set_in_shift(&config, false, true, 8);  
    sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_RX);

    pio_sm_init(pio, sm, offset, &config);  
  
}
%}